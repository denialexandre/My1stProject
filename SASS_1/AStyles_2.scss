$Color_1: linear-gradient(to right, rgba(255, 0, 0, 0.226), rgba(255, 166, 0, 0.226), rgba(255, 255, 0, 0.226), rgba(0, 128, 0, 0.226), rgba(0, 0, 255, 0.226), rgba(128, 0, 128, 0.226));
$Textito: rgba(0, 0, 255, 0.836);
/*Estas son variables globales*/

body{
    background-image: $Color_1;
}
h1{
    color: $Textito;
    text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.267);
    text-align: center;
}
h2{
    color:rgb(94, 34, 150);
    $Shadow: 5px 5px 5px rgba(0, 0, 0, 0.267);
    /*Estas son variables internas*/
    text-shadow: $Shadow;
    text-align:center;
    
    span{
        color:rgba(255, 0, 0, 0.486);
    }
}
p{
    text-align: center;
}
.box2{
    background-color: rgb(224, 238, 238);
    height: 750px;
    width: 580px;
    padding:15px;
    border-width: 1px;
    border-color:cadetblue;
    border-style: outset;
    float:left;
    text-transform: capitalize;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    color:orchid;
}
h5{
    text-align: center;
    color:rgb(107, 32, 177);
    $Shadow: 5px 5px 5px rgba(0, 0, 0, 0.267);
    /*Estas son variables internas*/
    text-shadow: $Shadow;
}
dt{
    margin-left: 15px;
    color:rgb(109, 41, 41);
    $Shadow: 3px 3px 3px rgba(0, 0, 0, 0.267);
    /*Estas son variables internas*/
    text-shadow: $Shadow;
}
dd{
    margin-left: 25px;
}
li{
    margin-left: 35px;
}
footer{
    text-align: center;
    margin-bottom: 15px; 
    $Shadow: 5px 5px 5px rgba(0, 0, 0, 0.267); 
    text-shadow: $Shadow;
}
.list{
    /*list-style-type: lower-greek;*/
    list-style-position: inside;
    list-style: none;
    text-decoration: none;
    display: inline-block;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin-left: 30px;
}
ul{
    li{
        margin-left: 50px;
        list-style-type: lower-greek;
        /*list-style-position: inside;
        list-style: none;
        text-decoration: none;
        display: inline-block;*/
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
}
.box2{
    background-color: rgb(224, 238, 238);
    height: 690px;
    width: 450px;
    padding:15px;
    border-width: 10px;
    border-color:cadetblue;
    border-style: outset;
    float:left;
    text-transform: capitalize;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    color:orchid;
    margin-left: 10px;
}

@import url('https://fonts.googleapis.com/css2?family=Barlow&family=Island+Moments&family=Moon+Dance&display=swap');

//fonts

$font1: 'Barlow', sans-serif;
$font2: 'Island Moments', cursive;
$font3: 'Moon Dance', cursive;


@import url('https://fonts.googleapis.com/css2?family=Oswald&display=swap');

//sass nos permite la incorporacion sencilla de operaciones matematicas
//operadores - inicio
$ancho: 220px;
$alto: 200px;

$var1: 100%;
$var2: 50%;

$blue: rgba(5, 5, 92, 0.767);
$green: #41a36a;
$red: rgb(105, 66, 66);
$black: black;
$white: rgb(247, 245, 245);

$xs: 15px;
$small: 20px;
$med: 40px;
$large: 60px;
$xl: 80px;

// paleta colores

$color1: #eb6464;
$color2: #bb7c2a;
$color3: #f1ff2bde;
$color4: #55c229;
$color5: #0fb7fa;
$color6: #930fdfe5;

//dimensiones

$size1: 100%;
$size1: 50%;
$size1: 20px;
$size1: 50px;

//fonts

$font1: cursive;
$font2: cursive;
$font3: cursive;
$font4: cursive;
$font5:  'Oswald', sans-serif;


.box__uno {
    background-color: $blue;
    width: ($var1) - ($var2);
    /* Ancho de 50%*/
    height: $alto*2;
    /* altura 400px*/
}

.box__dos {
    background-color: $green;
    width: ($ancho/2)-250;
    height: $alto+450;
    /*650px*/
}


$size: 150px;

.titulo {
    font-size: ($size/2)-40;
    //  math.div($size, 2);
    color: #ffffff;
    text-align: center;
}

//operadores - fin

//los condicionales Permiten establecer reglas para validar si se aplica o no una acción,
//cambio o asignación en el atributo de un elemento.
//Estas condiciones podrán incluir comparadores típicos (==, !=, <, >)
// == igual
// != distinto
// < menor
// > mayor
// <= menor o igual
// >= mayor o igual
// condicionales - inicio

p {
    height: $alto;
    width: $ancho;
    background-color: $red;
    font-size: $large;
    text-align: center;
}


$animal: caballos;

/* Mi constante */
p {
    @if $animal == gato {
        color: tomato;
        background-color: turquoise;
    }

    @else if $animal==perro {
        color: yellow;
    }

    @else if $animal==caballo {
        color: green;
    }

    @else {
        color: coral;
        background-color: #333;
    }
}

//otro ejemplo de condicional

.cont1 {
    height: 200px;
    width: 360px;
}

$img1: egret;
$img2: puma;
$img3: sea-slug;
$img4: otro;
$animal: $img4 ;

/* Mi constante */
.cont1 {
    @if $animal==egret {
        color: orange;
        background-image: url("../Multimedia/Fondo.JPG");
        background-position: center;
        background-size: cover;
    }

    @else if $animal==$img2 {
        color: red;
        background-color: yellow;
        background-image: url("img/puma.jpg");
        background-position: center;
        background-size: cover;
    }

    @else if $animal==sea-slug {
        color: green;
        background-image: url("img/sea-slug.jpg");
        background-position: center;
        background-size: cover;
    }

    @else {
        color: coral;
        background-color: #333;
    }
}

// condicionales - fin

//Un bucle es una secuencia que repite más de una vez en una porcion de codigo, dada cierta condicion
//Cuando la misma deja de cumplirse, el bucle finaliza

// bucles -inicio

.para {
    height: 100px;
    background-color: rgba(0, 255, 76, 0.336);
    border: 3px solid #333;
}

@for $i from 1 through 3 {
    // $i: 6;
    .casitodos-#{$i} {
        width: 6em * $i;
        // font-size: 20px * $i;
    }
    // $i: $i - 2
}

//otro ejemplo de bucle for

@for $in from 1 through 5 {

    .bucle-#{$in} {
        width: 200px ;
        height: 100px;
        background-color: purple;
        border: 2px solid #333;
        text-align: center;
        font-size: 20px;
    }

}


$base-color: rgb(226, 52, 29);
// $base-color: #3ff;


@for $in from 1 through 5 {
    .bucle-#{$in} {
        background-color: lighten($base-color, $in * 8%);
        // background-color: darken($base-color, $in * 10%);
    }
}

//bucles - fin


//each - inicio

.puma-icon,
.egret-icon,
.sea-slug-icon {
    height: 250px;
    width: 400px;
    border: 2px solid #333;
}

@each $animal in puma , sea-slug , egret {
    .#{$animal}-icon {
        background-image: url("../Multimedia/Fondo.JPG");
        //background-image: url("img/#{$animal}.jpg");
        background-size: cover;
        background-position: center;
    }
}

/*animal tendrá los valores de cada uno */


// otro ejemplo de uso del @each

$colores: red,
blue,
black,
orange,
violet;
//

@each $color in $colores  {
    .color-#{$color} {
        border-color: $color;
        color: $color;
        background-color: $color;
        font-size: 60px;
        text-shadow: 5px 5px 5px #fff;
        border: 2px solid;
        height: 200px;
        width: 600px;
    }
}

//each fin 


//Los mapas son variables cuyo valor es una colección de variables.
//Se definen con un nombre que los identifica. Las claves suelen ser cadenas o números,
//mientras que los valores pueden ser cualquier tipo de dato. 
//ejemplo: $map: (key1: value1, key2: value2, key3: value3);

//maps - incio

$redes: (
    /*Declaramos nuestro mapa*/
    red1: purple,
    red2: gold,
    red3: green,
    );

/*Creamos el bucle para usar los valores del mapa*/
@each $red, $font in $redes {
    .btn--#{$red} {
        background-color: #333;
        height: 200px;
        width: 500px;
        border: 2px solid #111;
        text-align: center;
        font-size: 50px;
        line-height: 200px;
        color: #fff;
        text-transform: uppercase;
        text-shadow: 0 0 5px $font ;
        font-family: cursive;
    }
}

//maps -fin


//con los extends vamos a agregar los estilos de otra clase
//extens - inicio

.redsocial {
    border: 3px solid #f00;
    background-color: orangered;
    height: 300px;
    width: 600px;
    padding: 20px;
}

.redsocial--nueva {
    @extend .redsocial;
    border-width: 3px;
    color: #fff;
    font-size: $large;
}

//extens - fin


//Los mixins Te permiten definir estilos que pueden ser reutilizados en tu proyecto.
//Una de las mayores diferencias con los Extend, es que los Mixins pueden recibir argumentos,
//los cuales nos permitirán producir una gran variedad de estilos con unas simples líneas.

//mixins - inicio

.box {
    background-color: $green;
    font-size: $large;
    color: #fff;
    text-align: center;
}

@mixin sizes($width, $height, $bcolor) {
    height: $height;
    width: $width;
    background-color: $bcolor;
}

.box {
    @include sizes(300px, 300px, blue);
    
}

.box2 {
    @include sizes(400px, 300px, green);
    //background-color: red;
    color: white;
    text-align: center;
    font-size: $large;
}

//mixins - fin

//whilleee - inicio

.whi {
    height: 200px;
    background-color: palegreen;
    width: 500px;
    border: 2px solid #ccc;

}

//whillee - fin

@import "_others"